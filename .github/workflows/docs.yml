name: Documentation

on:
  push:
    branches: [ '*' ]
  pull_request:
    branches: [ '*' ]

jobs:
  docs:
    runs-on: ubuntu-22.04
    outputs:
      id: ${{ needs.docs.outputs.id }}
    steps:
      - uses: actions/checkout@v2
      - name: Use Node.js
        uses: actions/setup-node@v1
        with: { node-version: '10' }
      - name: Setup tools
        run: |
          sudo sh -c "echo ttf-mscorefonts-installer msttcorefonts/accepted-mscorefonts-eula select true | debconf-set-selections"
          sudo apt-get update && sudo apt-get install -y calibre msttcorefonts
          builder/assets/install_gitbook.sh
          npm install markdownlint-cli@0.28.1 -g
          npm install svgexport -g
          gitbook -V
          markdownlint -V
      - name: Run markdownlint
        run: markdownlint docs
      - name: Check Assets
        run: |
          ./check_assets_size.py
          ./check_unused_assets.py
      - name: Build GitBook
        run: |
          gitbook install
          gitbook build
      - name: Generate PDF
        id: generate-pdf
        env:
          GITBOOK_SKIP_PDF: ${{ secrets.GITBOOK_SKIP_PDF }}
        continue-on-error: ${{ env.GITBOOK_SKIP_PDF != '' }}
        if: ${{ github.event_name == 'push' }}
        run: |
          for i in 1 2 3 4; do gitbook pdf ./ _book/drone.pdf && break || sleep 1; done
          sudo apt-get -q install ghostscript
          gs -sDEVICE=pdfwrite -dCompatibilityLevel=1.4 -dPDFSETTINGS=/default -dNOPAUSE -dQUIET -dBATCH -dDetectDuplicateImages -dCompressFonts=true -r150 -sOutputFile=_book/drone_ru_compressed.pdf _book/drone_ru.pdf
          rm _book/drone_ru.pdf && mv _book/drone_ru_compressed.pdf _book/drone_ru.pdf
          ls -lah _book/drone*.pdf
          echo '::set-output name=GITBOOK_PDF_OK::1'
      - name: Find PDF files
        id: find-pdf
        run: |
          pdf_files=$(find ./_book -type f -name "drone*.pdf")
          echo "PDF files found: $pdf_files"
          echo "::set-output name=pdf_files::${pdf_files}"

  upload-pdf:
    runs-on: ubuntu-latest
    needs: docs
    outputs:
      id: ${{ needs.docs.outputs.id }}
      pdf_files: ${{ needs.docs.outputs.pdf_files }}
    steps:
      - name: Upload PDF to release
        run: |
          release_id=$(curl -sSL -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            "https://api.github.com/repos/${{ github.repository }}/releases/latest" | jq -r '.id')

          for pdf_file in ${{ needs.upload-pdf.outputs.pdf_files }}; do
            echo "Uploading $pdf_file to release"
            curl -sSL -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
              -H "Content-Type: application/zip" \
              --data-binary "@$pdf_file" \
              "https://uploads.github.com/repos/${{ github.repository }}/releases/$release_id/assets?name=$(basename $pdf_file)"
          done

  deploy-docs:
    if: ${{ github.event_name == 'push' && github.ref == 'refs/heads/final-master' }}
    concurrency:
        group: "pages"
        cancel-in-progress: true
    environment:
      name: github-pages
      url: ${{ needs.docs.outputs.url }}
    runs-on: ubuntu-latest
    needs: [docs, upload-pdf]
    steps:
      - name: Deploy to GitHub Pages
        env:
          FREEZE_DOCS: ${{ secrets.FREEZE_DOCS }}
        if: ${{ !env.FREEZE_DOCS }}
        id: deployment
        uses: actions/deploy-pages@v1
